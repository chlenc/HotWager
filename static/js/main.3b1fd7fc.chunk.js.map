{"version":3,"sources":["Components/LoginBtn.tsx","Components/Button.tsx","Components/Dialog.tsx","Components/App/Avatar.tsx","Components/App/Head.tsx","Components/App/index.tsx","serviceWorker.ts","utils.ts","stores/SubStore.ts","constants.ts","stores/AccountsStore.ts","stores/DappStore.ts","stores/NotificationsStore.ts","stores/RootStore.ts","index.tsx"],"names":["LoginBtn","instance","setRef","component","this","props","botName","buttonSize","cornerRadius","requestAccess","usePic","onLogin","user","console","log","window","TelegramLoginWidget","dataOnauth","script","document","createElement","src","setAttribute","toString","async","appendChild","className","ref","children","React","Component","Button","styled","button","Dialog","state","visible","handleClose","setState","handleOpen","body","other","onClick","onClose","footer","_Img","img","Avatar","size","address","avatar","rows","cells","width","height","alt","Root","div","UserCardBody","Head","inject","observer","handleCopyAddress","notificationsStore","copyToClipboard","notify","handleTelegramResponse","response","accountsStore","updateUser","css","balance","title","Border","columns","dataIndex","key","render","v","e","Footer","App","dappStore","k1","k2","story","chooseEvent","load","event1amount","event2amount","withdraw","event","k","descr","disabled","data","EventItem","EventCard","Boolean","location","hostname","match","SubStore","rootStore","dApp","nodeUrl","AccountsStore","initState","serialize","tgUser","deserialize","id","seed","randomSeed","buildAddress","axios","get","observable","action","DappStore","startWatchState","autorun","reaction","updateStateAndBalance","scheduler","run","setInterval","value","a","params","feeAssetId","call","function","args","type","payment","assetId","amount","chainId","tx","invokeScript","broadcast","then","d","catch","alert","waitForTx","apiBase","res","updateBalance","reducer","acc","reduce","q1_next","q2_next","count1","n","count2","m","Object","entries","filter","map","split","i","NotificationsStore","_instance","notification","newInstance","content","opts","removeNotice","notice","duration","closable","style","right","background","RootStore","mobXStore","JSON","parse","localStorage","getItem","undefined","error","loadState","dir","setItem","stringify","delay","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b1fd7fc.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface IUser {\n    auth_date: number\n    hash: string\n    id: number\n    first_name?: string\n    last_name?: string\n    balance?: number\n    photo_url?: string\n    username?: string\n    seed?: string\n    address?: string\n}\n\ninterface IProps {\n    botName: string\n    onLogin?: (user: IUser) => void\n    buttonSize?: 'large' | 'medium' | 'small',\n    cornerRadius?: number,\n    requestAccess?: string,\n    usePic?: boolean,\n    className?: string\n}\n\nclass LoginBtn extends React.Component<IProps> {\n\n    instance: any;\n\n    setRef = (component: any) => {\n        this.instance = component;\n    };\n\n    componentDidMount() {\n        const {\n            botName,\n            buttonSize = 'medium',\n            cornerRadius,\n            requestAccess = 'write',\n            usePic = false,\n            onLogin = (user: any) => console.log(user)\n        } = this.props;\n\n        if (!botName) return <div>bot name is undefined</div>;\n\n        window.TelegramLoginWidget = {dataOnauth: (user: IUser) => onLogin(user)};\n\n        const script = document.createElement('script');\n        script.src = 'https://telegram.org/js/telegram-widget.js?4';\n        script.setAttribute('data-telegram-login', botName);\n        script.setAttribute('data-size', buttonSize);\n        cornerRadius && script.setAttribute('data-radius', cornerRadius.toString());\n        script.setAttribute('data-request-access', requestAccess);\n        script.setAttribute('data-userpic', usePic.toString());\n        script.setAttribute('data-onauth', 'TelegramLoginWidget.dataOnauth(user)');\n        script.async = true;\n        this.instance.appendChild(script);\n    }\n\n    render() {\n        return <div className={this.props.className} ref={this.setRef}>{this.props.children}</div>;\n    }\n}\n\n\nexport default LoginBtn;\n","import React from 'react';\nimport styled from \"@emotion/styled\";\n\n\nconst Button = styled.button`\noutline: none;\nborder: 4px solid #9192a2;\nbackground-color: #343d3f;\ncolor: #9192a2;\nwidth: 200px;\nmin-height: 40px;\nfont-family: 'Major Mono Display', monospace;\nfont-size: 20px;\ntext-transform: uppercase;\n:hover{\nbackground-color: #9192a2;\ncolor: #343d3f;\n}\n:disabled{\nbackground-color: #343d3f;\nborder-color: #343d3f;\ncursor: not-allowed;\n}\n`;\n\nexport default Button\n","import React from 'react';\nimport _Dialog from 'rc-dialog';\nimport 'rc-dialog/assets/index.css';\nimport Button from \"./Button\";\n\ninterface IProps {\n    title?: string\n    body: JSX.Element\n}\n\ninterface IState {\n    visible: boolean\n}\n\nexport default class Dialog extends React.Component<IProps, IState> {\n\n    state = {visible: false};\n\n    handleClose = () => this.setState({visible: false})\n\n    handleOpen = () => this.setState({visible: true});\n\n    render() {\n        const {children, body, ...other} = this.props;\n        const {visible} = this.state;\n        return <div>\n            <div onClick={this.handleOpen}>{children}</div>\n            <_Dialog {...other}\n                     onClose={this.handleClose}\n                     visible={visible}\n                     footer={<Button onClick={this.handleClose}>Close</Button>}\n            >\n                {body}\n            </_Dialog>\n        </div>\n            ;\n    }\n\n}\n","import * as React from 'react';\nimport * as avatar from 'identity-img';\nimport styled from \"@emotion/styled\";\n\n\nconst SIZE = 67;\n\ninterface IProps {\n    size?: number,\n    address: string,\n}\n\nconst _Img = styled.img`\nborder-radius: 50%;\nmargin: 8px;`\n\nconst Avatar = (props: IProps) => {\n    const {\n        size = SIZE,\n        address,\n    } = props;\n\n    avatar.config({\n        rows: 8,\n        cells: 8\n    });\n\n    const src = address\n        ? avatar.create(address, {size: size * 3})\n        : '';\n\n    return <_Img src={src} width={size} height={size} alt=\"Avatar\"/>\n};\n\nexport default Avatar;\n","/** @jsx jsx **/\nimport React from 'react';\nimport styled from \"@emotion/styled\";\nimport {css, jsx} from \"@emotion/core\";\nimport LoginBtn, {IUser} from \"../LoginBtn\";\nimport Button from \"../Button\";\nimport copyToClipboard from 'copy-to-clipboard'\nimport {inject, observer} from \"mobx-react\";\nimport {AccountsStore, NotificationsStore} from \"../../stores\";\nimport Dialog from \"../Dialog\";\nimport Avatar from \"./Avatar\";\n\ninterface IProps {\n    user: IUser | null\n    notificationsStore?: NotificationsStore;\n    accountsStore?: AccountsStore;\n}\n\n\nconst Root = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\nwidth: 100%;\n`;\n\nconst UserCardBody = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\nuser-select: none;\nmargin-right: 15px;\n`;\n\n\n@inject('notificationsStore', 'accountsStore')\n@observer\nexport default class Head extends React.Component<IProps> {\n\n    handleCopyAddress = () => {\n        const {user, notificationsStore} = this.props;\n        if (user && user.address) {\n            copyToClipboard(user.address.toString());\n            notificationsStore!.notify('Address was copied', {})\n        } else {\n            notificationsStore!.notify('Error: address is invalid', {})\n        }\n    };\n\n    handleTelegramResponse = (response: any) => {\n        console.log(this.props.accountsStore!.updateUser(response).address);\n    };\n\n    render() {\n        const {user} = this.props;\n        return <Root>\n            {\n                user && user.address &&\n                    <UserCardBody onClick={this.handleCopyAddress}>\n                        <Avatar address={user.address}/>\n                        <div>\n                            <div css={css`:hover{color: #595565}`}>{user.address}</div>\n                            <div>balance:&nbsp;{user.balance}&nbsp;waves</div>\n                        </div>\n                    </UserCardBody>\n            }\n            <Dialog\n                title={'You can login with'}\n                body={\n                    <UserCardBody>\n                    <div>TELEGRAM: </div>\n                    <LoginBtn botName={'HotWagerBot'} onLogin={this.handleTelegramResponse}/>\n                    </UserCardBody>\n                }\n            >\n                <Button>Login</Button>\n            </Dialog>\n        </Root>;\n    }\n\n}\n\n","import React from 'react';\nimport {AccountsStore, DappStore} from \"../../stores\";\nimport {inject, observer} from 'mobx-react';\nimport Head from \"./Head\";\nimport styled from \"@emotion/styled\";\nimport Button from \"../Button\";\n// import 'rc-table/assets/index.css'\n\nimport Table from 'rc-table';\nimport {TStoryItem} from \"../../stores/DappStore\";\n\nconst Border = styled.div`border-bottom: 1px solid`;\n\nconst columns = [\n    {title: 'Index', dataIndex: 'i', key: 'i', width: 100,},\n    {\n        title: 'Coef1', dataIndex: 'k1', key: 'k1', width: 100, render: (v: number, {e}: TStoryItem) =>\n            e === 1 ? <Border>{v / 100}</Border> : v / 100\n    },\n    {\n        title: 'Coef2', dataIndex: 'k2', key: 'k2', width: 100, render: (v: number, {e}: TStoryItem) =>\n            e === 2 ? <Border>{v / 100}</Border> : v / 100\n    },\n];\n\n\ninterface IInjectedProps {\n    accountsStore?: AccountsStore\n    dappStore?: DappStore\n}\n\nconst Root = styled.div`\nheight: calc(100vh - 80px);\ndisplay: flex;\nalign-items: center;\nflex-direction: column;\njustify-content: space-between;\nmargin: 20px 60px;\n`;\n\nconst EventLayout = styled.div`\ndisplay: flex;\n\n flex-direction: column;\n > * {\n  margin: 14px;\n }\n`\n\nconst Footer = styled.div``;\n\n@inject('accountsStore', 'dappStore')\n@observer\nclass App extends React.Component<IInjectedProps> {\n\n    render() {\n        const user = this.props.accountsStore!.user;\n        const {k1, k2, story, chooseEvent, load, event1amount, event2amount, withdraw} = this.props.dappStore!;\n        return <Root>\n            <Head user={user}/>\n            <EventCard title=\"Event I\" chooseEvent={chooseEvent} event={1} k={k1} load={load} descr={event1amount}/>\n            <EventCard title=\"Event II\" chooseEvent={chooseEvent} event={2} k={k2} load={load} descr={event2amount}/>\n            <Button disabled={load} onClick={withdraw}>withdraw</Button>\n            {story && <Table columns={columns} data={story}/>}\n            <Footer>HotWager©</Footer>\n        </Root>\n\n    }\n\n}\n\ninterface IEventCardProps {\n    title: string,\n    event: number,\n    k: number | null,\n    chooseEvent: (n: number) => void\n    load: boolean\n    descr: number | null\n}\n\nconst EventItem = styled.div`\nmin-height: 100px;\nmin-width: 300px;\npadding: 20px;\nborder: solid 4px #9192a2;\ndisplay: flex;\nflex-direction: column;\n > * {\n  margin-bottom: 14px;\n }\n`;\n\nclass EventCard extends React.Component<IEventCardProps> {\n\n    render() {\n        const {title, k, chooseEvent, load, event, descr} = this.props;\n        return <EventItem>\n            <div><b>{title}</b>&nbsp;k{k && k / 100}</div>\n            <Button disabled={load} onClick={() => chooseEvent(event)}>Bet</Button>\n            {descr && <div>{title} win {descr / 100}</div>}\n        </EventItem>;\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const loadState = (): any | undefined => {\n    try {\n        const state = JSON.parse(localStorage.getItem('store') as string);\n        return state || undefined;\n\n    } catch (error) {\n        console.log(error);\n        return undefined;\n    }\n\n};\nexport const saveState = (state: any): void => {\n    localStorage.setItem('store', JSON.stringify(state));\n};\n\n","import RootStore from './RootStore';\n\nclass SubStore {\n    constructor(public rootStore: RootStore) {\n    }\n}\n\nexport default SubStore;\n","export const dApp = '3N3AeA5FWm7EHheHoik8BBEA3GXXJosnVY8';\nexport const nodeUrl = 'https://testnode1.wavesnodes.com';\n","import RootStore from './RootStore';\nimport SubStore from './SubStore';\nimport { action, observable } from \"mobx\";\nimport { IUser } from \"../Components/LoginBtn\";\nimport { address as buildAddress, randomSeed } from '@waves/ts-lib-crypto';\nimport axios from \"axios\";\nimport { nodeUrl } from \"../constants\";\n\n\nexport class AccountsStore extends SubStore {\n\n    @observable user: IUser | null = null;\n\n    @action\n    public updateUser(user: IUser) {\n        if (!this.user || this.user.id !== user.id) {\n            user.seed = randomSeed();\n            user.address = buildAddress(user.seed, 'T');\n            //todo show notification\n            this.user = user;\n        }\n        return this.user\n    }\n\n    @action\n    async updateBalance() {\n        if (this.user && this.user.address) {\n            const {data: {balance}} = await axios.get(`${nodeUrl}/addresses/balance/${this.user.address}`);\n            this.user.balance = balance / 1e8\n        }\n    }\n\n    constructor(rootStore: RootStore, initState: any) {\n        super(rootStore);\n        if (initState != null) this.deserialize(initState)\n    }\n\n    public serialize = () => ({tgUser: this.user});\n\n    @action private deserialize = (initState: any) => {\n        if (initState.tgUser) this.user = initState.tgUser\n    }\n}\n\n","import RootStore from './RootStore';\nimport SubStore from './SubStore';\nimport {action, autorun, observable} from \"mobx\";\nimport axios from \"axios\";\nimport {dApp, nodeUrl} from \"../constants\";\nimport {IInvokeScriptParams} from \"@waves/waves-transactions/src/transactions\";\nimport {broadcast, invokeScript, waitForTx} from \"@waves/waves-transactions\";\n\nexport type TStoryItem = { e: number, k1: number, k2: number, i: number }\n\nexport class DappStore extends SubStore {\n\n    @observable k1: number | null = null;\n    @observable k2: number | null = null;\n    @observable event1amount: number | null = null;\n    @observable event2amount: number | null = null;\n    @observable count1: number | null = null;\n    @observable count2: number | null = null;\n    @observable story: TStoryItem[] | null = null;\n    @observable load: boolean = false;\n\n    constructor(rootStore: RootStore) {\n        super(rootStore);\n        this.updateStateAndBalance();\n        this.startWatchState()\n    }\n\n\n    private startWatchState = () =>\n        autorun((reaction) => this.updateStateAndBalance(), {scheduler: run => setInterval(run, 5000)})\n\n    @action\n    private updateStateAndBalance = async () => {\n        if (!this.rootStore.accountsStore.user || !this.rootStore.accountsStore.user.address) return;\n        const address = this.rootStore.accountsStore.user.address;\n        this.rootStore.accountsStore.updateBalance();\n        const {data} = await axios.get(`${nodeUrl}/addresses/data/${dApp}`);\n        const reducer = (acc: { [key: string]: string | number },\n                         {key, value}: { key: string, value: string | number }\n        ) => ({...acc, [key]: value});\n        const state = data.reduce(reducer, {});\n        this.k1 = state.q1_next;\n        this.k2 = state.q2_next;\n        this.count1 = state.n;\n        this.count2 = state.m;\n        this.event1amount = state[`${address}_event1amount`];\n        this.event2amount = state[`${address}_event2amount`];\n\n        this.story = Object.entries(state)\n            .filter(([_, val]) => val === address)\n            .map(([key]) => key.split('_')[0])\n            .map((i): TStoryItem => ({\n                e: state[`${i}_event`],\n                k1: state[`${i}_qoef1`],\n                k2: state[`${i}_qoef2`],\n                i: +i,\n            }))\n    }\n\n\n    chooseEvent = async (value: number) => {\n        if (!this.rootStore.accountsStore.user || !this.rootStore.accountsStore.user.seed) {\n            this.rootStore.notificationsStore.notify('invalid seed');\n            return;\n        }\n        const {seed} = this.rootStore.accountsStore.user;\n        this.load = true;\n        const params: IInvokeScriptParams = {\n            dApp,\n            feeAssetId: null,\n            call: {function: 'bet', args: [{type: 'integer', value}]},\n            payment: [{assetId: null, amount: 1e8}],\n            chainId: 'T'\n        };\n        const tx = invokeScript(params, seed);\n        broadcast(tx, nodeUrl).then(d => console.log(d.id)).catch(e => alert(e))\n        waitForTx(tx.id, {apiBase: 'https://nodes-testnet.wavesnodes.com'}).then((res) => {\n            this.load = false\n        })\n    }\n\n\n    withdraw = async () => {\n        if (!this.rootStore.accountsStore.user || !this.rootStore.accountsStore.user.seed) {\n            this.rootStore.notificationsStore.notify('invalid seed')\n            return\n        }\n\n        const params: IInvokeScriptParams = {\n            dApp,\n            feeAssetId: null,\n            call: {function: 'withdraw', args: []},\n            payment: [],\n            chainId: 'T'\n        };\n        const tx = invokeScript(params, this.rootStore.accountsStore.user.seed);\n        broadcast(tx, nodeUrl).then(d => console.log(d.id)).catch(e => alert(e));\n        waitForTx(tx.id, {apiBase: 'https://nodes-testnet.wavesnodes.com'}).then((res) => {\n            this.load = false\n        })\n    }\n\n\n}\n\n","import notification from 'rc-notification';\nimport SubStore from './SubStore';\nimport RootStore from './RootStore';\n\nexport type TNotifyOptions = Partial<{\n    duration: number,\n    closable: boolean,\n    key: string\n}>;\n\nclass NotificationsStore extends SubStore {\n    _instance?: any;\n\n    constructor(rootStore: RootStore) {\n        super(rootStore);\n        notification.newInstance({}, (notification: any) => this._instance = notification);\n    }\n\n    notify(content: string | JSX.Element, opts: TNotifyOptions = {}) {\n        if (opts.key) {\n            this._instance.removeNotice(opts.key);\n        }\n        this._instance && this._instance.notice({\n            content,\n            duration: opts.duration || 10,\n            key: opts.key,\n            closable: opts.closable,\n            style: { right: '50%', background: '#343d3f' }\n        });\n    }\n}\n\nexport default NotificationsStore;\n","\nimport { AccountsStore, DappStore} from './';\nimport NotificationsStore from \"./NotificationsStore\";\n\nclass RootStore {\n    public accountsStore: AccountsStore;\n    public dappStore: DappStore;\n    public notificationsStore: NotificationsStore;\n\n    constructor(initState?: any) {\n\n        if (initState == null) {\n            initState = {};\n        }\n        this.accountsStore = new AccountsStore(this, initState.accountsStore);\n        this.dappStore = new DappStore(this);\n        this.notificationsStore = new NotificationsStore(this);\n    }\n\n    public serialize = () => ({\n        accountsStore: this.accountsStore.serialize(),\n    });\n}\n\nexport default RootStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { loadState, saveState } from './utils';\nimport { RootStore } from \"./stores\";\nimport { autorun } from \"mobx\";\nimport { Provider } from 'mobx-react';\nimport 'rc-notification/assets/index.css';\n\n// Store init\nconst initState = loadState();\nconst mobXStore = new RootStore(initState);\nautorun(() => {\n    console.dir(mobXStore);\n    saveState(mobXStore.serialize());\n}, {delay: 1000});\n\nReactDOM.render(  <Provider {...mobXStore}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}