{"version":3,"sources":["Components/LoginBtn.tsx","Components/App/index.tsx","serviceWorker.ts","utils.ts","stores/SubStore.ts","constants.ts","stores/AccountsStore.ts","stores/DappStore.ts","index.tsx","stores/RootStore.ts"],"names":["LoginBtn","instance","setRef","component","this","props","botName","buttonSize","cornerRadius","requestAccess","usePic","onLogin","user","console","log","window","TelegramLoginWidget","dataOnauth","script","document","createElement","src","setAttribute","toString","async","appendChild","className","ref","children","React","Component","App","inject","observer","handleTelegramResponse","response","accountsStore","updateUser","address","dappStore","k1","k2","story","chooseEvent","withdraw","load","Grid","style","display","flexDirection","justifyContent","padding","container","spacing","justify","alignItems","item","xs","CardHeader","avatar","Avatar","alt","photo_url","Skeleton","variant","width","height","subheader","title","balance","k","marginTop","Button","disabled","seed","onClick","color","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","i","e","key","scope","EventCard","Card","margin","CardActionArea","CardContent","Typography","gutterBottom","CardActions","Boolean","location","hostname","match","SubStore","rootStore","dApp","nodeUrl","AccountsStore","initState","serialize","tgUser","deserialize","id","randomSeed","buildAddress","axios","get","data","observable","action","DappStore","startWatchState","autorun","reaction","updateStateAndBalance","scheduler","run","setInterval","value","a","params","feeAssetId","call","function","args","type","payment","assetId","amount","chainId","tx","invokeScript","broadcast","then","d","catch","alert","updateBalance","reducer","acc","state","reduce","q1_next","q2_next","count1","n","count2","m","Object","entries","filter","split","mobXStore","JSON","parse","localStorage","getItem","undefined","error","loadState","dir","setItem","stringify","delay","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bfd6e4b.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface IUser {\n    auth_date: number\n    hash: string\n    id: number\n    first_name?: string\n    last_name?: string\n    balance?: number\n    photo_url?: string\n    username?: string\n    seed?: string\n    address?: string\n}\n\ninterface IProps {\n    botName: string\n    onLogin?: (user: IUser) => void\n    buttonSize?: 'large' | 'medium' | 'small',\n    cornerRadius?: number,\n    requestAccess?: string,\n    usePic?: boolean,\n    className?: string\n}\n\nclass LoginBtn extends React.Component<IProps> {\n\n    instance: any;\n\n    setRef = (component: any) => {\n        this.instance = component;\n    };\n\n    componentDidMount() {\n        const {\n            botName,\n            buttonSize = 'medium',\n            cornerRadius,\n            requestAccess = 'write',\n            usePic = false,\n            onLogin = (user: any) => console.log(user)\n        } = this.props;\n\n        if (!botName) return <div>bot name is undefined</div>;\n\n        window.TelegramLoginWidget = {dataOnauth: (user: IUser) => onLogin(user)};\n\n        const script = document.createElement('script');\n        script.src = 'https://telegram.org/js/telegram-widget.js?4';\n        script.setAttribute('data-telegram-login', botName);\n        script.setAttribute('data-size', buttonSize);\n        cornerRadius && script.setAttribute('data-radius', cornerRadius.toString());\n        script.setAttribute('data-request-access', requestAccess);\n        script.setAttribute('data-userpic', usePic.toString());\n        script.setAttribute('data-onauth', 'TelegramLoginWidget.dataOnauth(user)');\n        script.async = true;\n        this.instance.appendChild(script);\n    }\n\n    render() {\n        return <div className={this.props.className} ref={this.setRef}>{this.props.children}</div>;\n    }\n}\n\n\nexport default LoginBtn;\n","import React from 'react';\nimport LoginBtn, { IUser } from \"../LoginBtn\";\nimport {\n    Button,\n    Card,\n    CardActionArea,\n    CardActions,\n    CardContent,\n    Grid,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography\n} from \"@material-ui/core\";\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Skeleton } from '@material-ui/lab';\nimport { AccountsStore, DappStore } from \"../../stores\";\nimport { inject, observer } from 'mobx-react';\n\ninterface IInjectedProps {\n    accountsStore?: AccountsStore\n    dappStore?: DappStore\n}\n\n@inject('accountsStore', 'dappStore')\n@observer\nclass App extends React.Component<IInjectedProps> {\n\n    handleTelegramResponse = (response: any) => {\n        console.log(this.props.accountsStore!.updateUser(response).address);\n    };\n\n    render() {\n        const user = this.props.accountsStore!.user;\n        const {k1, k2, story, chooseEvent, withdraw, load} = this.props.dappStore!;\n        return <Grid style={{display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', padding: '20px'}}  container spacing={6} justify=\"space-between\" alignItems=\"center\">\n            <Grid item xs={6}>\n                <CardHeader\n                    avatar={!user\n                        ? <Skeleton variant=\"circle\" width={40} height={40}/>\n                        : <Avatar alt=\"Ted talk\" src={user.photo_url}/>}\n                    subheader={!user ? <Skeleton height={6} width=\"40%\"/> : user.address}\n                    title={!user ? <Skeleton height={6} width=\"80%\"/> :\n                        <div>balance:&nbsp;{user.balance}&nbsp;waves</div>}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                <LoginBtn botName={'HotWagerBot'} onLogin={this.handleTelegramResponse} usePic/>\n            </Grid>\n            <Grid item xs={6} >\n                <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <EventCard title={'Event 1'} k={k1} user={user} chooseEvent={chooseEvent} load={load}/>\n                    <EventCard title={'Event 2'} k={k2} user={user} chooseEvent={chooseEvent} load={load}/>\n                </div>\n                <div style={{display: 'flex', marginTop: '50px', justifyContent: \"center\"}}>\n                    <Button\n                        disabled={load || !user || !user.seed}\n                        onClick={() => withdraw(user!.seed || '')} variant=\"contained\" color=\"secondary\">\n                        Withdraw\n                    </Button>\n                </div>\n            </Grid>\n            {story && <Grid item xs={6}>\n                <Table aria-label=\"simple table\" style={{width: 'unset'}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"right\">Index</TableCell>\n                            <TableCell align=\"right\">Coefficient 1</TableCell>\n                            <TableCell align=\"right\">Coefficient 2</TableCell>\n                            <TableCell>Your choose</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {story.map(({k1, k2, i, e}) => (\n                            <TableRow key={i}>\n                                <TableCell component=\"th\" scope=\"row\">{i}</TableCell>\n                                <TableCell align=\"right\">{k1 / 100}</TableCell>\n                                <TableCell align=\"right\">{k2 / 100}</TableCell>\n                                <TableCell align=\"right\">{e}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </Grid>}\n        </Grid>;\n    }\n\n}\n\ninterface IEventCardProps {\n    title: string,\n    k: number | null,\n    user: IUser | null,\n    chooseEvent: (n: number, s: string) => void\n    load: boolean\n}\n\nclass EventCard extends React.Component<IEventCardProps> {\n\n    render() {\n        const {title, k, user, chooseEvent, load} = this.props;\n        return <Card\n            style={{width: '250px', margin: '20px'}}>\n            <CardActionArea>\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {title}\n                    </Typography>\n                    <Typography gutterBottom variant=\"h5\" component=\"h3\">\n                        {k && k / 100}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n                        across all continents except Antarctica\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button\n                    disabled={load || !user || !user.seed}\n                    onClick={() => chooseEvent(1, user!.seed || '')} variant=\"contained\" color=\"primary\">\n                    Choose event\n                </Button>\n            </CardActions>\n        </Card>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const loadState = (): any | undefined => {\n    try {\n        const state = JSON.parse(localStorage.getItem('store') as string);\n        return state || undefined;\n\n    } catch (error) {\n        console.log(error);\n        return undefined;\n    }\n\n};\nexport const saveState = (state: any): void => {\n    localStorage.setItem('store', JSON.stringify(state));\n};\n\n","import RootStore from './RootStore';\n\nclass SubStore {\n    constructor(public rootStore: RootStore) {\n    }\n}\n\nexport default SubStore;\n","export const dApp = '3N3AeA5FWm7EHheHoik8BBEA3GXXJosnVY8';\nexport const nodeUrl = 'https://testnode1.wavesnodes.com';\n","import RootStore from './RootStore';\nimport SubStore from './SubStore';\nimport { action, observable } from \"mobx\";\nimport { IUser } from \"../Components/LoginBtn\";\nimport { address as buildAddress, randomSeed } from '@waves/ts-lib-crypto';\nimport axios from \"axios\";\nimport { nodeUrl } from \"../constants\";\n\n\nexport class AccountsStore extends SubStore {\n\n    @observable user: IUser | null = null;\n\n    @action\n    public updateUser(user: IUser) {\n        if (!this.user || this.user.id !== user.id) {\n            user.seed = randomSeed();\n            user.address = buildAddress(user.seed, 'T');\n            //todo show notification\n            this.user = user;\n        }\n        return this.user\n    }\n\n    @action\n    async updateBalance() {\n        if (this.user && this.user.address) {\n            const {data: {balance}} = await axios.get(`${nodeUrl}/addresses/balance/${this.user.address}`);\n            this.user.balance = balance / 1e8\n        }\n    }\n\n    constructor(rootStore: RootStore, initState: any) {\n        super(rootStore);\n        if (initState != null) this.deserialize(initState)\n    }\n\n    public serialize = () => ({tgUser: this.user});\n\n    @action private deserialize = (initState: any) => {\n        if (initState.tgUser) this.user = initState.tgUser\n    }\n}\n\n","import RootStore from './RootStore';\nimport SubStore from './SubStore';\nimport { action, autorun, observable } from \"mobx\";\nimport axios from \"axios\";\nimport { dApp, nodeUrl } from \"../constants\";\nimport { IInvokeScriptParams } from \"@waves/waves-transactions/src/transactions\";\nimport { broadcast, invokeScript } from \"@waves/waves-transactions\";\n\nexport type TStoryItem = { e: number, k1: number, k2: number, i: number }\n\nexport class DappStore extends SubStore {\n\n    @observable k1: number | null = null;\n    @observable k2: number | null = null;\n    @observable count1: number | null = null;\n    @observable count2: number | null = null;\n    @observable story: TStoryItem[] | null = null;\n    @observable load: boolean = false;\n\n    constructor(rootStore: RootStore) {\n        super(rootStore);\n        this.updateStateAndBalance();\n        this.startWatchState()\n    }\n\n\n    private startWatchState = () =>\n        autorun((reaction) => this.updateStateAndBalance(), {scheduler: run => setInterval(run, 5000)})\n\n    @action\n    private updateStateAndBalance = async () => {\n        if (!this.rootStore.accountsStore.user || !this.rootStore.accountsStore.user.address) return;\n        const address = this.rootStore.accountsStore.user.address;\n        this.rootStore.accountsStore.updateBalance();\n        const {data} = await axios.get(`${nodeUrl}/addresses/data/${dApp}`);\n        const reducer = (acc: { [key: string]: string | number },\n                         {key, value}: { key: string, value: string | number }\n        ) => ({...acc, [key]: value});\n        const state = data.reduce(reducer, {});\n        this.k1 = state.q1_next;\n        this.k2 = state.q2_next;\n        this.count1 = state.n;\n        this.count2 = state.m;\n\n        this.story = Object.entries(state)\n            .filter(([_, val]) => val === address)\n            .map(([key]) => key.split('_')[0])\n            .map((i): TStoryItem => ({\n                e: state[`${i}_event`],\n                k1: state[`${i}_qoef1`],\n                k2: state[`${i}_qoef2`],\n                i: +i,\n            }))\n    }\n\n\n    chooseEvent = async (value: number, seed: string) => {\n        this.load = true;\n        const params: IInvokeScriptParams = {\n            dApp,\n            feeAssetId: null,\n            call: {function: 'bet', args: [{type: 'integer', value}]},\n            payment: [{assetId: null, amount: 1e8}],\n            chainId: 'T'\n        };\n        const tx = invokeScript(params, seed);\n        await broadcast(tx, nodeUrl).then(d => console.log(d.id)).catch(e => alert(e)).then(() => this.load = false)\n    }\n\n\n    withdraw = async (seed: string) => {\n        const params: IInvokeScriptParams = {\n            dApp,\n            feeAssetId: null,\n            call: {function: 'withdraw', args: []},\n            payment: [],\n            chainId: 'T'\n        };\n        const tx = invokeScript(params, seed);\n        broadcast(tx, nodeUrl).then(d => console.log(d.id)).catch(e => alert(e)).then(() => this.load = false)\n    }\n\n\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { loadState, saveState } from './utils';\nimport { RootStore } from \"./stores\";\nimport { autorun } from \"mobx\";\nimport { Provider } from 'mobx-react';\n\n// Store init\nconst initState = loadState();\nconst mobXStore = new RootStore(initState);\nautorun(() => {\n    console.dir(mobXStore);\n    saveState(mobXStore.serialize());\n}, {delay: 1000});\n\nReactDOM.render(  <Provider {...mobXStore}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","\nimport { AccountsStore, DappStore} from './';\n\nclass RootStore {\n    public accountsStore: AccountsStore;\n    public dappStore: DappStore;\n\n    constructor(initState?: any) {\n\n        if (initState == null) {\n            initState = {};\n        }\n        this.accountsStore = new AccountsStore(this, initState.accountsStore);\n        this.dappStore = new DappStore(this);\n    }\n\n    public serialize = () => ({\n        accountsStore: this.accountsStore.serialize(),\n    });\n}\n\nexport default RootStore;\n"],"sourceRoot":""}